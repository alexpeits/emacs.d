* Variables and PATH
   
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/custom"))
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/custom-themes/"))
(setenv "PATH" (concat
                "/usr/local/bin" path-separator
                (expand-file-name "~/bin") path-separator
                (expand-file-name "~/.local/bin") path-separator
                (expand-file-name "~/.cargo/bin") path-separator
                (getenv "PATH")))
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path (expand-file-name "~/bin"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
(setq user-full-name "Alex Peitsinis"
      user-mail-address "alexpeitsinis@gmail.com"
      auth-sources '("~/.authinfo.gpg"))

(defvar is-mac (eq system-type 'darwin)
  "Whether emacs is running in mac or not")
#+END_SRC
   
* Various utility functions
   
#+BEGIN_SRC emacs-lisp
(defmacro comment (&rest body)
  "Comment out one or more s-expressions."
  nil)

(defmacro my/add-hooks (hooks &rest body)
  `(dolist (hook ,hooks)
     (add-hook hook (lambda () ,@body))))

(defmacro my/execute-f-with-hook (f winf)
  `(lambda (&rest args)
     (interactive)
     (,winf)
     (apply (quote ,f) args)))

(defmacro my/control-function-window-split (f height width)
  `(lambda (&rest args)
     (interactive)
     (let ((split-height-threshold ,height)
           (split-width-threshold ,width))
       (apply (quote ,f) args))))

;; what it says
(defun my/revert-all-buffers ()
  "Refresh all open file buffers without confirmation.
Buffers in modified (not yet saved) state in emacs will not be reverted. They
will be reverted though if they were modified outside emacs.
Buffers visiting files which do not exist any more or are no longer readable
will be killed."
  (interactive)
  (dolist (buf (buffer-list))
    (let ((filename (buffer-file-name buf)))
      ;; Revert only buffers containing files, which are not modified;
      ;; do not try to revert non-file buffers like *Messages*.
      (when (and filename
                 (not (buffer-modified-p buf)))
        (if (file-readable-p filename)
            ;; If the file exists and is readable, revert the buffer.
            (with-current-buffer buf
              (revert-buffer :ignore-auto :noconfirm :preserve-modes))
          ;; Otherwise, kill the buffer.
          (let (kill-buffer-query-functions) ; No query done when killing buffer
            (kill-buffer buf)
            (message "Killed non-existing/unreadable file buffer: %s" filename))))))
  (message "Finished reverting buffers containing unmodified files."))

;; read file as string
(defun my/read-file-contents (path)
  (with-temp-buffer
    (insert-file-contents (expand-file-name path))
    (buffer-string)))

;; read file lines into a list
(defun my/read-file-into-list (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))

;; do `reg' when called, `alt' when called with C-u
(defmacro my/defun-with-alt (reg alt)
  `(lambda (u)
     (interactive "P")
     (if (null u)
         (,reg)
       (,alt))))

;; Create a new scratch buffer and select major mode
(defun my/create-scratch-buffer-with-mode (other-window)
  (interactive "P")
  (let* ((mmode (completing-read "buffer mode: " (apropos-internal "-mode$") nil nil nil nil (symbol-name initial-major-mode)))
         (buf (generate-new-buffer (concat "*scratch" "-" mmode "*")))
         (switch-func (if other-window 'switch-to-buffer-other-window 'switch-to-buffer)))
    (funcall switch-func buf)
    (funcall (intern mmode))
    (setq buffer-offer-save nil)))

;; Jump to definition, copied from spacemacs

(defvar my-default-jump-handlers '()
  "List of jump handlers available in every mode.")

(defvar-local my-jump-handlers '()
  "List of jump handlers local to this buffer.")

(defmacro my|define-jump-handlers (mode &rest handlers)
  "Defines jump handlers for the given MODE.
This defines a variable `my-jump-handlers-MODE' to which
handlers can be added, and a function added to MODE-hook which
sets `my-jump-handlers' in buffers of that mode."
  (let ((mode-hook (intern (format "%S-hook" mode)))
        (func (intern (format "my//init-jump-handlers-%S" mode)))
        (handlers-list (intern (format "my-jump-handlers-%S" mode))))
    `(progn
       (defvar ,handlers-list ',handlers
         ,(format (concat "List of mode-specific jump handlers for %S. "
                          "These take priority over those in "
                          "`my-default-jump-handlers'.")
                  mode))
       (defun ,func ()
         (setq my-jump-handlers
               (append ,handlers-list
                       my-default-jump-handlers)))
       (add-hook ',mode-hook ',func)
       )))

(defun my/jump-to-definition ()
  (interactive)
  (catch 'done
    (let ((old-buffer (current-buffer))
          (old-point (point)))
      (dolist (-handler my-jump-handlers)
        (let ((handler (if (listp -handler) (car -handler) -handler))
              (async (when (listp -handler)
                       (plist-get (cdr -handler) :async))))
          (ignore-errors
            (call-interactively handler))
          (when (or async
                    (not (eq old-point (point)))
                    (not (equal old-buffer (current-buffer))))
            (throw 'done t)))))
    (message "No jump handler was able to find this symbol.")))

;; Thanks Tikhon Jelvis
(defun my/file-name-at-point (add-to-kill-ring)
  "Prompts the user for a file path using the standard C-x C-f
interface and inserts it at point."
  (interactive "P")
  (let ((action (if add-to-kill-ring 'kill-new 'insert))
        (path (read-file-name "file path: ")))
    (apply action (list path))))
(global-set-key (kbd "C-c f") 'my/file-name-at-point)
#+END_SRC

* Package management
   
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             '("MELPA Stable" . "https://stable.melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
;; activate installed packages
(package-initialize)
(setq package-enable-at-startup nil)
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)

(use-package cl :ensure t)
(use-package diminish :ensure t)
#+END_SRC
   
* Various configurations
** TODO sort these
   
#+BEGIN_SRC emacs-lisp
;; remember last position
(if (<= emacs-major-version 24)
    (use-package saveplace
       :ensure t
       :config
       (setq-default save-place t))
  (save-place-mode 1))

;; undo tree
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (setq undo-tree-visualizer-relative-timestamps t
        undo-tree-visualizer-diff t)
  (global-undo-tree-mode))

;; use column width 80 to fill (e.g. with gq)
(setq-default fill-column 79)
(defun my/set-mode-fill-width (mode-hook width)
  (add-hook mode-hook `(lambda () (setq fill-column ,width))))

;; diminish various minor modes in modeline
(add-hook 'auto-revert-mode-hook (lambda () (diminish 'auto-revert-mode "")))
(add-hook 'eldoc-mode-hook (lambda () (diminish 'eldoc-mode "")))

;; store all backup and autosave files in
;; one dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; only with this set to nil can org-mode export & open too
(setq process-connection-type nil)

;; yesss
(defalias 'yes-or-no-p #'y-or-n-p)

;; use spaces
(setq-default indent-tabs-mode nil)

;; always scroll to the end of compilation buffers
(setq compilation-scroll-output t)

;; vim-like scrolling (emacs=0)
(setq scroll-conservatively 101)

;; smooth scrolling
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
      mouse-wheel-progressive-speed t ;; don't accelerate scrolling
      mouse-wheel-follow-mouse 't) ;; scroll window under mouse

;; some keymaps
(global-set-key (kbd "M-o") 'other-window)
;; used in help
(define-key 'help-command (kbd "C-l") 'find-library)
(define-key 'help-command (kbd "C-k") 'find-function-on-key)
(define-key 'help-command (kbd "C-f") 'find-function)
(define-key 'help-command (kbd "C-p") 'find-function-at-point)
(define-key 'help-command (kbd "C-v") 'find-variable)

;; flyspell on pure text buffers
;; (dolist (hook '(text-mode-hook change-log-mode-hook log-edit-mode-hook))
;;   (add-hook hook (lambda () (flyspell-mode 1))))

;; IBuffer
;; (eval-after-load "ibuffer"
;;  (define-key ibuffer-mode-map (kbd "M-o") nil))

;; add env files to conf-mode alist
(add-to-list 'auto-mode-alist '(".env\\'" . conf-mode))
(add-to-list 'auto-mode-alist '(".env.dev\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("env.example\\'" . conf-mode))

;; DocView
(setq doc-view-continuous t)

(defun my/indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."









  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (indent-region (point-min) (point-max))
        (message "Indented buffer.")))))

(use-package smartparens
  :ensure t
  :defer t
  :commands (sp-split-sexp sp-newline sp-up-sexp)
  :diminish smartparens-mode
  :init
  (defun my/smartparens-pair-newline (id action context)
    (save-excursion
      (newline)
      (indent-according-to-mode)))

  (defun my/smartparens-pair-newline-and-indent (id action context)
    (my/smartparens-pair-newline id action context)
    (indent-according-to-mode))

  (setq sp-show-pair-delay 0.2
        ;; fix paren highlighting in normal mode
        sp-show-pair-from-inside t
        sp-cancel-autoskip-on-backward-movement nil
        sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)

  (use-package evil-smartparens
    :ensure t
    :diminish evil-smartparens-mode)

  (my/add-hooks '(prog-mode-hook comint-mode-hook css-mode-hook) (smartparens-mode))
  (setq my/lisp-mode-hooks '(emacs-lisp-mode-hook clojure-mode-hook))
  (my/add-hooks my/lisp-mode-hooks (smartparens-strict-mode) (evil-smartparens-mode))

  :config
  (require 'smartparens-config)
  (show-smartparens-global-mode +1)

  ;; don't create a pair with single quote in minibuffer
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

  (sp-pair "(" nil :post-handlers
           '(:add (my/smartparens-pair-newline-and-indent "RET")))
  (sp-pair "{" nil :post-handlers
           '(:add (my/smartparens-pair-newline-and-indent "RET")))
  (sp-pair "[" nil :post-handlers
           '(:add (my/smartparens-pair-newline-and-indent "RET")))

  ;; keybindings
  (sp-use-paredit-bindings)
  (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
  (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)
  (define-key smartparens-mode-map (kbd "M-j") nil))

(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (which-key-mode))

(use-package imenu-list
  :ensure t
  :config

  (defun my/imenu-list-jump-to-window ()
    "Jump to imenu-list window if visible, otherwise create it and jump."
    (interactive)
    (if (get-buffer-window imenu-list-buffer-name)
        (select-window (get-buffer-window imenu-list-buffer-name))
      (progn
        (imenu-list-minor-mode)
        (select-window (get-buffer-window imenu-list-buffer-name)))))

  (defun my/imenu-list-smart-toggle ()
    "If imenu-list window doesn't exist, create it and jump. If if does but
it is not the current buffer, jump there. If it exists and it's the current
buffer, close it."
    (interactive)
    (if (eq (current-buffer) (get-buffer imenu-list-buffer-name))
        (imenu-list-quit-window)
      (my/imenu-list-jump-to-window)))

  ;; (global-set-key (kbd "C-\\") #'imenu-list-minor-mode)
  (global-set-key (kbd "C-\\") #'my/imenu-list-smart-toggle)
  (setq imenu-list-size 30))

(use-package zeal-at-point
  :unless is-mac
  :ensure t
  :config
  (global-set-key (kbd "C-c d") 'zeal-at-point)
  (add-to-list 'zeal-at-point-mode-alist '(python-mode . ("python" "django")))
  (add-to-list 'zeal-at-point-mode-alist '(haskell-mode . "haskell"))
  (add-to-list 'zeal-at-point-mode-alist '(js2-mode . "react")))

(use-package dash-at-point
  :if is-mac
  :ensure t
  :config
  (global-set-key (kbd "C-c d") 'dash-at-point))

(use-package hideshow
  :diminish hs-minor-mode
  :config
  (add-hook 'prog-mode-hook #'hs-minor-mode))

(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "C-M-=") 'er/contract-region))

(use-package misc
  :config
  (global-set-key (kbd "M-Z") 'zap-up-to-char))
#+END_SRC

** engine-mode
   
#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :ensure t
  :config
  (engine-mode t)

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "c")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
    :keybinding "i")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s"
    :keybinding "r")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine wolfram-alpha
    "http://www.wolframalpha.com/input/?i=%s"
    :keybinding "m")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "v")

  (defengine hoogle
    "https://hoogle.haskell.org/?hoogle=%s"
    :keybinding "h"))
#+END_SRC

** anzu

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :config
  (use-package evil-anzu
    :ensure t
    :config
    (with-eval-after-load 'evil (require 'evil-anzu)))
  (setq anzu-mode-lighter "")
  (global-anzu-mode +1))
#+END_SRC

** math input
   
# http://ergoemacs.org/emacs/xmsi-math-symbols-input.html
# https://github.com/roelvandijk/base-unicode-symbols/blob/master/Prelude/Unicode.hs

#+BEGIN_SRC emacs-lisp
(use-package xah-math-input
  :ensure t
  :diminish xah-math-input-mode
  :config
  (global-xah-math-input-mode 1)
  (define-key xah-math-input-keymap (kbd "S-SPC" ) nil)
  (define-key xah-math-input-keymap (kbd "S-C-SPC") 'xah-math-input-change-to-symbol)

  (puthash "::" "∷" xah-math-input-abrvs)
  (puthash "bottom" "⊥" xah-math-input-abrvs))
#+END_SRC

* Term, eshell and comint-mode
** Terms
  
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook
          (lambda ()
            (linum-mode 0)
            (define-key term-raw-map (kbd "M-o") 'other-window)
            (set-face-background 'term (face-attribute 'default :background))))

;; automatically close term buffers on EOF
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)

;; comint
(setq comint-prompt-read-only t)

(defun my/comint-clear-buffer ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))

(add-hook 'comint-mode-hook
          (lambda ()
            (define-key comint-mode-map (kbd "C-l") 'my/comint-clear-buffer)))
#+END_SRC

** eshell

#+BEGIN_SRC emacs-lisp
(setq eshell-destroy-buffer-when-process-dies t)
(setq eshell-history-size 1024)
(setq eshell-prompt-regexp "^[^#$]* [#$] ")
(load "em-hist")           ; So the history vars are defined
(if (boundp 'eshell-save-history-on-exit)
    (setq eshell-save-history-on-exit t)) ; Don't ask, just save
(if (boundp 'eshell-ask-to-save-history)
    (setq eshell-ask-to-save-history 'always)) ; For older(?) version

(defun pwd-repl-home (pwd)
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
   (home-len (length home)))
    (if (and
   (>= (length pwd) home-len)
   (equal home (substring pwd 0 home-len)))
  (concat "~" (substring pwd home-len))
      pwd)))

(defun curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (and (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
    (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
      (propertize (concat "["
              (if (> (length git-output) 0)
                  (substring git-output 0 -1)
                "(no branch)")
              "]") 'face 'font-lock-string-face)
      )))

(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize ((lambda (p-lst)
            (if (> (length p-lst) 3)
                (concat
                 (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                            (substring elm 0 1)))
                            (butlast p-lst 3)
                            "/")
                 "/"
                 (mapconcat (lambda (elm) elm)
                            (last p-lst 3)
                            "/"))
              (mapconcat (lambda (elm) elm)
                         p-lst
                         "/")))
          (split-string (pwd-repl-home (eshell/pwd)) "/")) 'face 'font-lock-type-face)
         (or (curr-dir-git-branch-string (eshell/pwd)))
         (propertize " $" 'face 'font-lock-type-face)
         (propertize " " 'face 'default)
         )))

(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)

(defun eshell/clear ()
  (interactive)
  "Clear the eshell buffer."
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))

(add-hook 'eshell-mode-hook
          (lambda ()
            (define-key eshell-mode-map (kbd "C-l") 'eshell/clear)))
#+END_SRC

* UI
  
#+BEGIN_SRC emacs-lisp
;; highlight numbers
(use-package highlight-numbers
  :ensure t
  :config
  (my/add-hooks '(prog-mode-hook css-mode-hook) (highlight-numbers-mode)))

;; visual effect after closing delimiter
(setq show-paren-delay 0.3)

;; show column in modeline
(setq column-number-mode t)

;; disable annoying stuff
(setq ring-bell-function 'ignore
      inhibit-startup-message t
      inhibit-splash-screen t
      initial-scratch-message nil)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

;; linum
(use-package linum :config (setq linum-format 'dynamic))

;; hl-line
(setq hl-line-sticky-flag nil)
(defvar my/hl-line-contrast 5)
(defun my/hl-line-set-bg ()
  (let* ((func (if (eq my/theme-type 'dark) 'color-lighten-name 'color-darken-name))
         (bg (face-attribute 'default :background)))
    (custom-theme-set-faces
     my/theme
     `(hl-line ((t (:background ,(funcall func bg my/hl-line-contrast))))))
    ))
(add-hook 'my/theme-change-hook 'my/hl-line-set-bg)
;; (add-hook 'prog-mode-hook 'hl-line-mode)

;; highlight trailing whitespace
(setq whitespace-style '(face trailing))
(add-hook 'whitespace-mode-hook
          #'(lambda () (diminish 'whitespace-mode "")))
(add-hook 'prog-mode-hook #'whitespace-mode)

(use-package fill-column-indicator
  :if (>= emacs-major-version 25)
  :ensure t
  :init
  (setq fci-handle-truncate-lines t)
  (setq
   fci-mode-hooks
   '(python-mode-hook
     markdown-mode-hook))
  (defun my/set-fci-rule-color ()
    (setq fci-rule-color
          (let ((bg-color (face-attribute 'default :background)))
            (if (eq my/theme-type 'light)
                (color-darken-name bg-color 10)
              (color-lighten-name bg-color 10)))))
  (add-hook 'fci-mode-hook #'my/set-fci-rule-color)
  (my/add-hooks
   fci-mode-hooks
   (my/set-fci-rule-color) (fci-mode)))

#+END_SRC

** highlight whitespace
   
#+BEGIN_SRC emacs-lisp :tangle no
;; 80-column rule
(use-package whitespace
  :ensure t
  :diminish global-whitespace-mode
  :config
  (setq whitespace-line-column 79)
  (setq whitespace-style '(face lines-tail))
  (setq whitespace-global-modes '(python-mode))
  (global-whitespace-mode +1))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(unless is-mac
  (defvar zenburn-override-colors-alist)
  (setq zenburn-override-colors-alist
        '(
          ("zenburn-bg" . "#3a3a3a")
          ("zenburn-bg+1" . "#494949")
          )))

(setq my/themes
  `((my/abyss
     .
     ((theme . abyss)
      (faces . ((default (:background "#141414" :foreground "#bbe0f0"))
                (fringe (:background "#282828"))
                (mode-line-inactive (:box nil :foreground "#cc79a7" :background "#3a3a3a"))
                (region (:background "#253b76"))
                (show-paren-match (:background "#365096"))))))
    (my/tomorrow-night-eighties
     .
     ((theme . sanityinc-tomorrow-eighties)
      (faces . ((default (:foreground "#cccccc" :background "#1a1a1a"))
                (region (:background "#424242"))
                (cursor (:background "#cccccc"))
                (font-lock-comment-face (:foreground "#999999" :slant normal))
                (mode-line-buffer-id (:foreground "#cc99cc" :weight bold))
                (persp-selected-face (:foreground "#297fd6" :weight bold))
                (mode-line (:background "#585858" :foreground "#cccccc" :box (:line-width 1 :color "#515151") :weight normal))
                (mode-line-inactive (:inherit mode-line :background "#313131" :foreground "#999999" :weight normal))))))
    (my/nimbus
     .
     ((theme . nimbus)
      (faces . ((mode-line (:box nil :foreground "#ced4e0" :background "#414968"))
                (mode-line-inactive (:box nil :foreground "#4b7192" :background "#272a34"))
                (persp-selected-face (:foreground "#66b1ff" :weight bold))
                (region (:background "#203b56"))
                (fringe (:background "#222222"))
                (show-paren-match (:background "#245587"))))))
    (my/blackboard
     .
     ((theme . blackboard)
      (faces . ((default (:foreground "#e2e2e2" :background "#0c1021"))
                (mode-line (:box nil :foreground "#ced4e0" :background "#414968"))
                (mode-line-inactive (:box nil :foreground "#4b7192" :background "#272a34"))
                (persp-selected-face (:foreground "#66b1ff" :weight bold))
                (font-lock-comment-face (:foreground "#9b9b9b" :slant italic))
                (linum (:inherit fringe :foreground "#607480"))
                (magit-section-highlight (:background "#203b56"))
                (show-paren-match (:background "#245587"))))))
    (my/gotham
     .
     ((theme . gotham)
      (faces . ((persp-selected-face (:foreground "#3daccf" :weight bold))
                (font-lock-keyword-face (:foreground "#23748e" :weight bold))
                (font-lock-comment-face (:foreground "#346776"))
                (font-lock-comment-delimiter-face (:inherit font-lock-comment-face))
                (outline-1 (:foreground "#2aa889"))
                (shadow (:foreground "#599cab"))
                (treemacs-fringe-indicator-face (:foreground "#2aa889"))
                (isearch (:inverse-video nil :foreground "black" :background "#d26937"))
                (lazy-highlight (:foreground "black" :background "#2a6e83"))
                (ivy-current-match (:background "#134a60"))
                (mode-line (:box nil :foreground "#89c9d7" :background "#233a49"))
                (mode-line-inactive (:box nil :foreground "#245361" :background "#1e222a"))))))
    (my/one-dark
     .
     ((theme . one-dark)
      (faces . ((default (:foreground "#bac2d1" :background "#171920"))
                (mode-line (:box nil :foreground "#ced4e0" :background "#464c57"))
                (mode-line-inactive (:box nil :foreground "#646c7d" :background "#2c323c"))
                (mode-line-buffer-id (:weight bold))
                (org-block (:foreground "#a0a8b5"))
                (persp-selected-face (:foreground "#66b1ff" :weight bold))
                (vertical-border (:foreground "#546276"))
                (fringe (:background "#20222b"))
                (font-lock-comment-face (:foreground "#747c8e" :slant italic))
                (font-lock-doc-face (:foreground "#9fb893"))
                (markdown-code-face (:inherit fixed-pitch :foreground "#c678dd"))
                (show-paren-match (:background "#245587"))))))
    ))

(defvar my/avail-themes '(deeper-blue wombat))
(defvar my/current-theme 0)

(defvar my/theme (elt my/avail-themes 0))
(defvar my/theme-type 'dark)
(defvar my/theme-change-hook nil)

(defun my/set-theme (&optional theme-name theme-type dont-run-hooks)
  (let* ((theme-name- (if (null theme-name) (elt my/avail-themes my/current-theme) theme-name))
         (theme-name (if (listp theme-name-) (car theme-name-) theme-name-))
         (dont-run-hooks
          (if (listp theme-name-) (caddr theme-name-) dont-run-hooks))
         (config (cdr (assoc theme-name my/themes)))
         (my-theme (cdr (assoc 'theme config)))
         (theme (if (null my-theme) theme-name my-theme))
         (theme-type
          (if (listp theme-name-) (cadr theme-name-) theme-type))
         (theme-type (if (null theme-type) (cdr (assoc 'type config)) theme-type))
         (theme-type (if (null theme-type) 'dark theme-type))
         (faces (cdr (assoc 'faces config)))
         (post-eval (cdr (assoc 'post-eval config))))
    ;; disable all currently enabled themes (otherwise faces get messed up)
    (mapc 'disable-theme custom-enabled-themes)
    (load-theme theme t)
    (setq my/theme-type theme-type)
    (setq my/theme theme)
    (dolist (fc faces)
      (let ((face (nth 0 fc))
            (props (nth 1 fc)))
        (unless (null face)
          (custom-theme-set-faces
           theme
           `(,face ((t ,@props)))))))
    (unless (null post-eval)
      (mapc #'eval post-eval))
    (unless dont-run-hooks (run-hooks 'my/theme-change-hook))))

(defun my/toggle-theme ()
  (interactive)
  (let* ((next-theme (mod (1+ my/current-theme) (length my/avail-themes)))
         (theme (elt my/avail-themes next-theme)))
    (setq my/current-theme next-theme)
    (my/set-theme)))

(defun my/refresh-theme ()
  (interactive)
  (my/set-theme)
  (setq linum-format 'dynamic))
#+END_SRC
   
* Font

#+BEGIN_SRC emacs-lisp
;; can set avail-fonts in ~/.emacs.d/hosts in the corresponding host file
(defvar my/avail-fonts '("Monospace-12"))
(defvar my/current-font 0)

(defun my/set-font (&optional font)
  (let ((font (if (null font) (elt my/avail-fonts my/current-font) font)))
    (set-frame-font font)))

(defun my/toggle-font ()
  (interactive)
  (let ((next-font (mod (1+ my/current-font) (length my/avail-fonts))))
    (my/set-font (elt my/avail-fonts next-font))
    (setq my/current-font next-font)))

(defun my/refresh-font ()
  (interactive)
  (my/set-font (elt my/avail-fonts my/current-font)))

;; size & scaling
(setq text-scale-mode-step 1.05)
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

* VCS
** Magit
   
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :init
  (use-package magit-todos :ensure t)
  (magit-todos-mode)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
  (add-hook 'magit-blame-mode-hook
            (lambda ()
              (if (or (not (boundp 'magit-blame-mode))
                      magit-blame-mode)
                  (evil-emacs-state)
                (evil-exit-emacs-state)))))
#+END_SRC

** Diff-hl

#+BEGIN_SRC emacs-lisp
(defun my/diff-hl-set-fringe-faces ()
  (let* ((dark (eq my/theme-type 'dark))
         (ins-bg (if dark "#143514" "#b9e0b3"))
         (ins-fg (if dark "#4c934c" "#143514"))
         (ch-bg (if dark "#122544" "#b5d8f4"))
         (ch-fg (if dark "#466daf" "#122544"))
         (del-bg (if dark "#491111" "#f4b5b5"))
         (del-fg (if dark "#bc4d4d" "#491111")))
    (custom-theme-set-faces
     my/theme
     `(diff-hl-insert ((t (:background ,ins-bg :foreground ,ins-fg))))
     `(diff-hl-change ((t (:background ,ch-bg :foreground ,ch-fg))))
     `(diff-hl-delete ((t (:background ,del-bg :foreground ,del-fg)))))))

(if (display-graphic-p)
    (use-package diff-hl
      :ensure t
      :config
      (global-diff-hl-mode)
      (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
      (add-hook 'my/theme-change-hook 'my/diff-hl-set-fringe-faces)
      (diff-hl-flydiff-mode))
  (use-package git-gutter+
    :ensure t
    :config
    (global-git-gutter+-mode)))

#+END_SRC

* Evil-mode
** keybind to command mapping

#+BEGIN_SRC emacs-lisp
(defvar my/leader-keys
  '(
    ("]"  find-tag-other-window)
    (";"  evilnc-comment-or-uncomment-lines)

    ("bb" helm-buffers-list)
    ("bs" my/create-scratch-buffer-with-mode)

    ("el" my/toggle-flycheck-error-list)

    ("fa" helm-ag)
    ("ff" helm-find)

    ("h"  help)

    ("j"  my/jump-to-definition)

    ("n"  my/file-tree)

    ("pl" persp-next)
    ("ph" persp-prev)
    ("pp" projectile-persp-switch-project)
    ("pq" persp-kill)
    ("pr" persp-rename)
    ("ps" counsel-projectile-ag)
    ("pt" my/counsel-ag-todos-global)

    ("sd" pwd)

    ("if" my/file-name-at-point)
    ("iu" counsel-unicode-char)

    ("t8" fci-mode)
    ("tc" global-company-mode)
    ("tf" my/toggle-font)
    ("tg" global-diff-hl-mode)
    ("tl" linum-mode)
    ("th" hl-line-mode)
    ("ts" flycheck-mode)
    ("tt" my/toggle-theme)
    ("tw" toggle-truncate-lines)

    ("uh" rainbow-mode)
    ("um" menu-bar-mode)
    ("up" rainbow-delimiters-mode)

    ("Ts" counsel-load-theme)
    ))
#+END_SRC

** For when I'm not using evil mode

#+BEGIN_SRC emacs-lisp
(define-prefix-command 'my/leader-map)

(define-key ctl-x-map "m" 'my/leader-map)

(dolist (i my/leader-keys)
  (let ((k (car i))
        (f (cadr i)))
    (define-key my/leader-map k f)))
#+END_SRC

** evil-mode setup
   
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>")
  (dolist (i my/leader-keys)
  (let ((k (car i))
        (f (cadr i)))
    (evil-leader/set-key k f))))

(use-package evil
  :ensure t
  :config
  (setq evil-want-C-i-jump nil)
  ;; (setq evil-move-cursor-back nil)  ;; works better with lisp navigation
  (my/add-hooks
   '(
     prog-mode-hook
     text-mode-hook
     haskell-cabal-mode-hook
     conf-unix-mode-hook
     conf-colon-mode-hook
     conf-space-mode-hook
     conf-windows-mode-hook
     toml-mode-hook
     )
   (evil-local-mode))

  (defun my/make-emacs-mode (mode)
    "Make `mode' use emacs keybindings."
    (delete mode evil-insert-state-modes)
    (add-to-list 'evil-emacs-state-modes mode))

  ;; don't need C-n, C-p
  (define-key evil-insert-state-map (kbd "C-n") nil)
  (define-key evil-insert-state-map (kbd "C-p") nil)

  ;; magit
  (evil-define-key 'normal magit-blame-mode-map (kbd "q") 'magit-blame-quit)

  ;; intercept ESC when running in terminal
  (setq evil-intercept-esc t)
  (evil-esc-mode)

  ;; move state to beginning of modeline
  (setq evil-mode-line-format '(before . mode-line-front-space))

  ;; move search result to center of the screen
  ;; (defadvice evil-search-next
  ;;     (after advice-for-evil-search-next activate)
  ;;   (evil-scroll-line-to-center (line-number-at-pos)))

  ;; (defadvice evil-search-previous
  ;;     (after advice-for-evil-search-previous activate)
  ;;   (evil-scroll-line-to-center (line-number-at-pos)))

  ;; this is needed to be able to use C-h
  (global-set-key (kbd "C-h") 'help)
  (define-key evil-normal-state-map (kbd "C-h") 'undefined)
  (define-key evil-insert-state-map (kbd "C-h") 'undefined)
  (define-key evil-visual-state-map (kbd "C-h") 'undefined)

  (define-key evil-emacs-state-map (kbd "C-h") 'help)
  (define-key evil-insert-state-map (kbd "C-k") nil)

  (define-key evil-normal-state-map (kbd "M-.") nil)

  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

  (define-key evil-normal-state-map (kbd ";") 'evil-ex)
  (define-key evil-visual-state-map (kbd ";") 'evil-ex)
  (evil-ex-define-cmd "sv" 'split-window-below)

  (define-key evil-normal-state-map (kbd "C-p") 'counsel-projectile-find-file)

  (define-key evil-insert-state-map (kbd "C-M-i") 'company-complete)

  (define-key evil-visual-state-map (kbd "<") #'(lambda ()
                 (interactive)
                 (progn
                     (call-interactively 'evil-shift-left)
                     (execute-kbd-macro "gv"))))

  (define-key evil-visual-state-map (kbd ">") #'(lambda ()
                 (interactive)
                 (progn
                     (call-interactively 'evil-shift-right)
                     (execute-kbd-macro "gv"))))

  ;; search with star while in v-mode
  (use-package evil-visualstar
    :ensure t
    :config
    (global-evil-visualstar-mode))
  )

#+END_SRC

** evil packages that can be used without evil-mode

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
    :ensure t
    :config
    ;; evilnc toggles instead of commenting/uncommenting
    (setq evilnc-invert-comment-line-by-line t)
    (define-key global-map (kbd "M-;") 'evilnc-comment-or-uncomment-lines))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1)
  (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)
  (defconst my/mark-active-alist
  `((mark-active
      ,@(let ((m (make-sparse-keymap)))
          (define-key m (kbd "C-c s") 'evil-surround-region)
          m))))
  (add-to-list 'emulation-mode-map-alists 'my/mark-active-alist))
#+END_SRC

* Hybrid input mode
  
# Copied directly from spacemacs

#+BEGIN_SRC emacs-lisp
(defcustom hybrid-mode-default-state 'normal
  "Value of `evil-default-state' for hybrid-mode."
  :group 'my
  :type 'symbol)

(defcustom hybrid-mode-enable-evilified-state t
  "If non nil then evilified states is enabled in buffer supporting it."
  :group 'my
  :type 'boolean)

(defvar hybrid-mode-default-state-backup evil-default-state
  "Backup of `evil-default-state'.")

(defadvice evil-insert-state (around hybrid-insert-to-hybrid-state disable)
  "Forces Hybrid state."
  (evil-hybrid-state))

(defadvice evil-evilified-state (around hybrid-evilified-to-hybrid-state disable)
  "Forces Hybrid state."
  (if (equal -1 (ad-get-arg 0))
      ad-do-it
    (if hybrid-mode-enable-evilified-state
        ad-do-it
      ;; seems better to set the emacs state instead of hybrid for evilified
      ;; buffers
      (evil-emacs-state))))

;;;###autoload
(define-minor-mode hybrid-mode
  "Global minor mode to replace insert state by hybrid state."
  :global t
  :lighter ""
  :group 'my
  (if hybrid-mode
      (enable-hybrid-editing-style)
    (disable-hybrid-editing-style)))

(defun enable-hybrid-editing-style ()
  "Enable the hybrid editing style."
  (setq hybrid-mode-default-state-backup evil-default-state
        evil-default-state hybrid-mode-default-state)
  ;; replace evil states by `hybrid state'
  (ad-enable-advice 'evil-insert-state
                    'around 'hybrid-insert-to-hybrid-state)
  (ad-enable-advice 'evil-evilified-state
                    'around 'hybrid-evilified-to-hybrid-state)
  (ad-activate 'evil-insert-state)
  (ad-activate 'evil-evilified-state)
  ;; key bindings hooks for dynamic switching of editing styles
  (run-hook-with-args 'spacemacs-editing-style-hook 'hybrid)
  ;; initiate `hybrid state'
  )

(defun disable-hybrid-editing-style ()
  "Disable the hybrid editing style (reverting to 'vim style)."
  (setq evil-default-state hybrid-mode-default-state-backup)
  ;; restore evil states
  (ad-disable-advice 'evil-insert-state
                     'around 'hybrid-insert-to-hybrid-state)
  (ad-disable-advice 'evil-evilified-state
                     'around 'hybrid-evilified-to-hybrid-state)
  (ad-activate 'evil-insert-state)
  (ad-activate 'evil-evilified-state)
  ;; restore key bindings
  (run-hook-with-args 'spacemacs-editing-style-hook 'vim)
  ;; restore the states
  )

;; This code is from evil insert state definition, any change upstream
;; should be reflected here
;; see https://github.com/emacs-evil/evil/blob/56e92f7cb4e04e665670460093b41f58446b7a2b/evil-states.el#L108
(evil-define-state hybrid
  "Hybrid state for hybrid mode."
  :tag " <H> "
  :cursor (bar . 2)
  :message "-- HYBRID --"
  :entry-hook (evil-start-track-last-insertion)
  :exit-hook (evil-cleanup-insert-state evil-stop-track-last-insertion)
  :input-method t
  (cond
   ((evil-hybrid-state-p)
    (add-hook 'post-command-hook #'evil-maybe-remove-spaces)
    (add-hook 'pre-command-hook #'evil-insert-repeat-hook)
    (setq evil-maybe-remove-spaces t)
    (unless (eq evil-want-fine-undo t)
      (evil-start-undo-step)))
   (t
    (remove-hook 'post-command-hook #'evil-maybe-remove-spaces)
    (remove-hook 'pre-command-hook #'evil-insert-repeat-hook)
    (evil-maybe-remove-spaces t)
    (setq evil-insert-repeat-info evil-repeat-info)
    (evil-set-marker ?^ nil t)
    (unless (eq evil-want-fine-undo t)
      (evil-end-undo-step))
    (when evil-move-cursor-back
      (when (or (evil-normal-state-p evil-next-state)
                (evil-motion-state-p evil-next-state))
        (evil-move-cursor-back))))))

(define-key evil-hybrid-state-map [escape] 'evil-normal-state)

;; Override stock evil function `evil-insert-state-p'
(defun evil-insert-state-p (&optional state)
  "Whether the current state is insert."
  (and evil-local-mode
       (memq (or state evil-state) '(insert hybrid))))

(define-key evil-hybrid-state-map [escape] 'evil-normal-state)
(define-key evil-hybrid-state-map (kbd "C-w") 'evil-delete-backward-word)
#+END_SRC

* Keybindings (not used)
  
Treat hybrid mode and emacs keybindings the same way

#+BEGIN_SRC emacs-lisp :tangle no
(defun my/emacs-modes-keybind (key fun)
  (define-key global-map (kbd key) fun)
  (define-key evil-hybrid-state-map (kbd key) fun))

(define-prefix-command 'my/command-map)

(define-key ctl-x-map (kbd "C-;") 'my/command-map)

(define-key my/command-map (kbd "c") 'evil-surround-change)

(defun vi-open-line-above ()
  "Insert a newline above the current line and put point at beginning."
  (interactive)
  (unless (bolp)
    (beginning-of-line))
  (newline)
  (forward-line -1)
  (indent-according-to-mode))

(defun vi-open-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))

(defun vi-open-line (&optional abovep)
  "Insert a newline below the current line and put point at beginning.
With a prefix argument, insert a newline above the current line."
  (interactive "P")
  (if abovep
      (vi-open-line-above)
    (vi-open-line-below)))
#+END_SRC

* Haskell
  
#+BEGIN_SRC emacs-lisp
(use-package intero
  :ensure t
  :defer t
  :diminish intero-mode
  :init
  (setq intero-blacklist '("~/.xmonad"))
  :config
  ;; pretty print (use :pretty, :prettyl, :no-pretty in ghci)
  ;; this has to be installed in every repo until I find a solution
  (setq intero-extra-ghci-options '("-package" "pretty-simple"))
  ;; don't auto insert matching single quotes in haskell mode, since I
  ;; mostly use them for promoted data types
  (sp-local-pair 'haskell-mode "'" nil :actions nil)
  (sp-local-pair 'intero-repl-mode "'" nil :actions nil))

(add-hook 'haskell-mode-hook
          (lambda ()
            (intero-mode-blacklist)
            (haskell-decl-scan-mode)
            (flycheck-add-next-checker 'intero '(t . haskell-hlint))
            (define-key haskell-mode-map (kbd "C-c s") 'my/haskell-save-and-format)
            ;; (eldoc-mode)
            ))

(defun my/haskell-save-and-format ()
  "Formats the import statements using haskell-stylish and saves
the current file."
  (interactive)
  (save-buffer)
  (haskell-mode-stylish-buffer)
  (save-buffer))
#+END_SRC
  
** ghc-mod (not used now but some useful stuff)

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ghc :ensure t :defer t)
(use-package hindent :ensure t :defer t)
(autoload 'ghc-init "ghc" nil t)
(autoload 'ghc-debug "ghc" nil t)
(my|define-jump-handlers haskell-mode)
(setq
 ghc-report-errors nil
 haskell-process-suggest-remove-import-lines t
 haskell-process-auto-import-loaded-modules t
 haskell-process-log t
 haskell-process-type 'stack-ghci
 haskell-company-ghc-show-info t)

(add-hook 'haskell-mode-hook
          (lambda ()
            (ghc-init)
            (hindent-mode)
            (eldoc-mode)
            (define-key haskell-mode-map (kbd "C-c C-h") 'my/hoogle-lookup-browser)
            (define-key haskell-mode-map (kbd "C-c h") 'my/hoogle-lookup)
            (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
            (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
            (define-key haskell-mode-map (kbd "C-c C-n C-t") 'haskell-process-do-type)
            (define-key haskell-mode-map (kbd "C-c C-n C-i") 'haskell-process-do-info)
            (define-key haskell-mode-map (kbd "C-c C-n C-c") 'haskell-process-cabal-build)
            (define-key haskell-mode-map (kbd "C-c C-n c") 'haskell-process-cabal)
            (add-to-list 'my-jump-handlers-haskell-mode
                         'haskell-mode-jump-to-def)
            ))
(add-hook 'haskell-cabal-mode-hook
          (lambda ()
            (eldoc-mode)
            (define-key haskell-cabal-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
            (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
            (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
            (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
            ))
(eval-after-load 'haskell-mode '(progn (defun ghc-check-syntax ())))

(defvar my/hoogle-cmd "/home/alex/.local/bin/hoogle")
(defvar my/hoogle-server-port 26543)
(defvar my/hoogle-server-process nil)
(defvar my/hoogle-server-process-name "emacs-hoogle")
(defvar my/hoogle-server-process-buffer-name (format "*%s*" my/hoogle-server-process-name))
(defvar my/haskell-hoogle-url "http://haskell.org/hoogle/?q=%s")

(defun my/hoogle-generate-local ()
  (interactive)
  (if (projectile-project-p)
      (projectile-run-compilation
       "stack exec -- hoogle generate --local --download --database=.stack-work/hoogle")
    (error "Not in a project")))

(defun my/get-hoogle-db ()
  (let ((global-db "/home/alex/.hoogle/.hoogle"))
    (if (projectile-project-p)
        (progn
          (let ((local-db (projectile-expand-root ".stack-work/hoogle")))
            (if (file-exists-p local-db)
                local-db
              global-db)))
      global-db)))

(defun my/select-hoogle-db ()
  (let* ((base-comp '("/home/alex/.hoogle/hoogle"))
         (completions
          (if (projectile-project-p)
              (progn
                (let ((proj-db (projectile-expand-root ".stack-work/hoogle")))
                  (if (file-exists-p proj-db)
                      (append (list proj-db) base-comp)
                    base-comp)))
            base-comp)))
    (completing-read
     "hoogle database:"
     completions
     nil nil nil nil (car completions))))

(defun my/hoogle-server-start ()
  (interactive)
  (let ((db (my/select-hoogle-db)))
    (unless (my/hoogle-server-running-p)
      (setq my/hoogle-server-process
            (start-process
             my/hoogle-server-process-name
             (get-buffer-create my/hoogle-server-process-buffer-name)
             "hoogle" "server"
             "-p" (number-to-string my/hoogle-server-port)
             (format "--database=%s" db)
             "--local")))))

(defun my/hoogle-server-stop ()
  (interactive)
  (when (my/hoogle-server-running-p)
    (kill-process (get-buffer-create my/hoogle-server-process-buffer-name))
    (setq my/hoogle-server-process nil)))

(defun my/hoogle-server-running-p ()
  (condition-case _err
      (process-live-p my/hoogle-server-process)
    (error nil)))

(defun my/hoogle-lookup-browser ()
  (interactive)
  (if (my/hoogle-server-running-p)
      (browse-url (format "http://localhost:%i/?hoogle=%s"
                          my/hoogle-server-port
                          (read-string "hoogle: " (haskell-ident-at-point))))
    (haskell-mode-toggle-interactive-prompt-state)
    (unwind-protect
        (when (y-or-n-p "Hoogle server not running, start server? ")
          (my/hoogle-server-start)
          (my/hoogle-lookup-browser))
      (haskell-mode-toggle-interactive-prompt-state t))))

(defun my/hoogle-lookup (query &optional info)
  (interactive
   (let ((def (haskell-ident-at-point)))
     (if (and def (symbolp def)) (setq def (symbol-name def)))
     (list (read-string (if def
                            (format "Hoogle query (default %s): " def)
                          "Hoogle query: ")
                        nil nil def)
           current-prefix-arg)))
  (if (null my/hoogle-cmd)
      (browse-url (format haskell-hoogle-url (url-hexify-string query)))
    (let ((command (concat my/hoogle-cmd
                           " --database=" (my/get-hoogle-db)
                           (if info " -i " "")
                           " --color " (shell-quote-argument query))))
      (with-help-window "*hoogle*"
        (with-current-buffer standard-output
          (insert (shell-command-to-string command))
          (ansi-color-apply-on-region (point-min) (point-max)))))))

#+END_SRC

* Purescript

#+BEGIN_SRC emacs-lisp
(use-package purescript-mode
  :ensure t
  :diminish purescript-indentation-mode
  :config
  (add-hook 'purescript-mode-hook #'turn-on-purescript-indentation))

(use-package psc-ide
  :ensure t
  :after (purescript-mode)
  ;; :diminish psc-ide-mode
  :config
  (add-hook 'purescript-mode-hook #'psc-ide-mode))
#+END_SRC

* Python
   
#+BEGIN_SRC emacs-lisp
(use-package pyvenv) ;; this has to be downloaded

(defun eshell/workon (arg) (pyvenv-workon arg))
(defun eshell/deactivate () (pyvenv-deactivate))

(setq python-shell-prompt-detect-failure-warning nil)
(my|define-jump-handlers python-mode)
(my|define-jump-handlers cython-mode anaconda-mode-goto)

(defun my/mode-line-venv ()
  (if (string= major-mode "python-mode")
      (let ((venv (if (null pyvenv-virtual-env-name)
                      "-"
                    pyvenv-virtual-env-name)))
        (concat
         "["
         (propertize venv 'face '(:underline t))
         "] "))
    ""))

(use-package anaconda-mode
  :ensure t
  :diminish anaconda-mode
  :diminish anaconda-eldoc-mode)

(add-hook 'python-mode-hook
          (lambda ()
            (anaconda-mode)
            (anaconda-eldoc-mode)
            (define-key python-mode-map (kbd "C-c C-j") 'counsel-imenu)
            (setq-default flycheck-disabled-checkers
                          (append flycheck-disabled-checkers
                                  '(python-pycompile)))
            (add-to-list 'my-jump-handlers-python-mode
                         '(anaconda-mode-find-definitions :async t))))

#+END_SRC

* Javascript
   
#+BEGIN_SRC emacs-lisp
(use-package nvm
  :if (file-exists-p "~/.nvm")
  :ensure t
  :config

  (setq my/default-node-version (car (split-string (my/read-file-contents "~/.nvm/alias/default"))))
  (defvar my/current-node-version nil
    "Currently used node version. Set only after a js file is opened")

  (defun my/add-node-to-path (version)
    (let ((pathstr (format (expand-file-name "~/.nvm/versions/node/%s/bin") version)))
      (unless (member pathstr exec-path) (setq exec-path (append exec-path (list pathstr))))))

  (defun my/remove-node-from-path (version)
    (let ((pathstr (format (expand-file-name "~/.nvm/versions/node/%s/bin") version)))
      (setq exec-path (cl-remove-if (lambda (el) (string= el pathstr)) exec-path))))

  (defun my/select-node-version ()
    (completing-read
     "node version: "
     (reverse (mapcar 'car (nvm--installed-versions)))
     nil nil nil nil my/default-node-version))

  (defun my/nvm-use-ver ()
    (interactive)
    (let ((choice (my/select-node-version)))
      (nvm-use choice)
      (unless (null my/current-node-version) (my/remove-node-from-path my/current-node-version))
      (my/add-node-to-path choice)
      (setq my/current-node-version choice)
      )))

(require 'js-doc)
(use-package js2-mode :ensure t)
(use-package rjsx-mode :ensure t)
(add-hook 'js2-mode-hook (lambda ()
                           (define-key js2-mode-map "\C-c m d" 'js-doc-insert-function-doc)
                           (define-key js2-mode-map "\C-c m @" 'js-doc-insert-tag)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(my|define-jump-handlers js2-mode)
(my|define-jump-handlers rjsx-mode)
(my|define-jump-handlers web-mode)

(dolist (mode '("js2" "rjsx"))
  (let ((hook (intern-soft (format "%s-mode-hook" mode)))
        (handler (intern-soft (format "my-jump-handlers-%s-mode" mode))))
    (add-hook hook `(lambda ()
                      (if (and (file-exists-p "~/.nvm")
                               (null my/current-node-version))
                          (my/nvm-use-ver))
                      (setq evil-shift-width 2)
                      (use-package tern :ensure t :config (tern-mode))
                      (add-to-list (quote ,handler) 'tern-find-definition)))))

(setq ;; js2-mode
 js2-basic-offset 2
 js-indent-level 2
 ;; web-mode
 css-indent-offset 2
 web-mode-markup-indent-offset 2
 web-mode-css-indent-offset 2
 web-mode-code-indent-offset 2
 web-mode-attr-indent-offset 2)

;; Turn off js2 mode errors & warnings (we lean on eslint/standard)
(setq js2-mode-show-parse-errors nil
      js2-mode-show-strict-warnings nil)
#+END_SRC

* Clojure
   
#+BEGIN_SRC emacs-lisp
(add-hook
 'clojure-mode-hook
 (lambda ()
   (eldoc-mode)))

(add-hook
 'cider-repl-mode-hook
 (lambda ()
   (eldoc-mode)
   (define-key cider-repl-mode-map "\C-c\C-l" 'cider-repl-clear-buffer)))
#+END_SRC

* Lisps
   
#+BEGIN_SRC emacs-lisp
;; expand macros in another window
(define-key lisp-mode-map (kbd "C-c C-m") #'(lambda () (interactive) (macrostep-expand t)))
(my/add-hooks '(lisp-mode-hook emacs-lisp-mode-hook lisp-interaction-mode-hook) (eldoc-mode))
#+END_SRC

* Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (my/set-mode-fill-width 'markdown-mode-hook 100)
  (setq markdown-fontify-code-blocks-natively t))
#+END_SRC

* Other programming languages
** C/C++
*** irony
    
#+BEGIN_SRC emacs-lisp :tangle no
(use-package irony
  :ensure t
  :init
  (use-package ggtags :ensure t)
  (my/add-hooks '(c++-mode-hook c-mode-hook objc-mode-hook)
             (irony-mode)
             (ggtags-mode 1)
             (c-turn-on-eldoc-mode))
  (defvar c-eldoc-includes "-I/usr/include -I/usr/include/python3.5m -I./ -I../")
  :config
  (defun my-irony-mode-hook ()
    (defun irony-snippet-available-p () -1)
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook (lambda ()
                               (my-irony-mode-hook)
                               (irony-cdb-autosetup-compile-options)))
  (use-package company-irony-c-headers :ensure t :defer t))

(my|define-jump-handlers c-mode)
(my|define-jump-handlers c++-mode)
#+END_SRC

*** general setup

#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp :tangle no
(use-package rust-mode
  :ensure t
  :config
  (use-package cargo :ensure t)
  (use-package racer :ensure t)
  (setq cargo-process--custom-path-to-bin "~/.cargo/bin")
  (add-hook 'rust-mode-hook
            (lambda ()
              (cargo-minor-mode)
              (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)
              (racer-mode)
              (eldoc-mode)))
  (defvar my/rust-sysroot  "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu")
  (defvar my/rust-src-path (concat my/rust-sysroot "/lib/rustlib/src/rust/src"))
  (setq racer-cmd "~/.cargo/bin/racer")
  (setq racer-rust-src-path my/rust-src-path)
  (setenv "RUST_SRC_PATH" my/rust-src-path))
#+END_SRC
    
** HTML

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(use-package emmet-mode
  :ensure t
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC

** JSON, YAML, Markdown etc.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '(".json\\'" . json-mode))
  (add-to-list 'auto-mode-alist '(".json.tmpl\\'" . json-mode)))

(use-package yaml-mode :ensure t)
#+END_SRC
    
* Company-mode
   
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :init
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 0.5)
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (use-package company-tern :ensure t)
  (use-package company-quickhelp :ensure t)
  (use-package company-anaconda :ensure t)
  (company-quickhelp-mode 1)
  (global-set-key (kbd "C-M-i") 'company-complete)
  (eval-after-load "company"
    '(progn
       (add-to-list 'company-backends 'company-anaconda)
       ;; (add-to-list 'company-backends '(company-irony-c-headers company-c-headers company-irony))
       ;; (add-to-list 'company-backends 'company-ghc)
       ;; (add-to-list 'company-backends 'company-racer)
       (add-to-list 'company-backends 'company-tern)
       (add-to-list 'company-backends 'company-files)
       (define-key company-active-map (kbd "C-p") 'company-select-previous)
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "C-f") 'company-show-location)
       (setq company-minimum-prefix-length 3))))
#+END_SRC

* Flycheck-mode
   
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish flycheck-mode
  :init (global-flycheck-mode)
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (defun my/toggle-flycheck-error-list ()
    (interactive)
    (-if-let (window (flycheck-get-error-list-window))
        (quit-window nil window)
      (flycheck-list-errors)))
  (use-package flymake-yaml :ensure t)
  (use-package flycheck-haskell :ensure t)
  (use-package flycheck-yamllint :ensure t)
  (eval-after-load 'flycheck
    '(progn
       (add-hook 'flycheck-mode-hook #'flycheck-yamllint-setup)
      ))
  (define-key global-map (kbd "C-c ! t") 'flycheck-mode)
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.33)))

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (setq-default flycheck-temp-prefix ".flycheck")
  (setq-default flycheck-emacs-lisp-load-path 'inherit)
  (defun my/flycheck-always ()
    (interactive)
    (setq flycheck-check-syntax-automatically '(save idle-change new-line mode-enabled)))

  (defun my/flycheck-on-save ()
    (interactive)
    (setq flycheck-check-syntax-automatically '(save mode-enabled)))
)
#+END_SRC

* Projectile
  
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :ensure t
  :config
  (persp-mode)
  ;; emacs window title
  (setq frame-title-format
        '("" invocation-name "@" system-name
          (:eval (when persp-mode (format "[%s]" (persp-name (persp-curr))))))))
#+END_SRC
   
#+BEGIN_SRC emacs-lisp
(setq projectile-keymap-prefix (kbd "C-c p"))
(setq projectile-mode-line-fn '(lambda () (format " P[%s]" (projectile-project-name))))
(use-package projectile
  :ensure t
  :init
  (use-package persp-projectile :ensure t)
  :config
  (projectile-mode)
  (setq projectile-completion-system 'ivy
        projectile-mode-line-prefix " P")
  (defun my/try-exec-in-project (in-proj-f out-proj-f &rest args)
    (if (projectile-project-p)
        (apply in-proj-f args)
      (apply out-proj-f args))))
#+END_SRC

* Ivy/Counsel/Swiper
   
#+BEGIN_SRC emacs-lisp
(defun my/swiper (fuzzy)
  (interactive "P")
  (if (null fuzzy)
      (swiper)
    (let* ((temp-builders (copy-alist ivy-re-builders-alist))
           (ivy-re-builders-alist (add-to-list 'temp-builders
                                               '(swiper . ivy--regex-fuzzy))))
      (swiper))))

(use-package ivy
  :ensure t
  :diminish ivy-mode
  :init
  (use-package counsel :ensure t)
  (use-package swiper :ensure t)
  (use-package flx :ensure t)  ;; better fuzzy matching
  (use-package counsel-projectile :ensure t)
  (use-package ivy-bibtex :ensure t)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers nil)
  (setq enable-recursive-minibuffers t)
  (setq ivy-count-format "(%d/%d) ")
  (global-set-key (kbd "C-s") 'my/swiper)
  (global-set-key (kbd "C-c r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-c i") 'counsel-imenu)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-s-o") 'counsel-rhythmbox)
  (global-set-key (kbd "C-x r b") 'counsel-bookmark)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)

  (define-key projectile-command-map (kbd "f") 'counsel-projectile-find-file)
  (define-key projectile-command-map (kbd "s") 'counsel-projectile-ag)

  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  (setq counsel-ag-base-command "ag --vimgrep --nocolor --nogroup %s")
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (ivy-bibtex . ivy--regex-ignore-order)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)  ;; no ^ initially
  (setq ivy-magic-tilde nil)

  (dolist (action '(counsel-find-file counsel-recentf))
          (ivy-set-actions
           action
           `(("s"
              ,(my/control-function-window-split
                find-file-other-window
                0 nil)
              "split horizontally")
             ("v"
              ,(my/control-function-window-split
                find-file-other-window
                nil 0)
              "split vertically")
             ("n"
              ,(my/execute-f-with-hook
                find-file
                ace-select-window)
              "select window")
             )))

  (ivy-set-actions
   'ivy-switch-buffer
   `(("s"
      ,(my/control-function-window-split
        ivy--switch-buffer-other-window-action
        0 nil)
      "split horizontally")
     ("v"
      ,(my/control-function-window-split
        ivy--switch-buffer-other-window-action
        nil 0)
      "split vertically")
     ("n"
      ,(my/execute-f-with-hook
        (lambda (b) (switch-to-buffer b nil 'force-same-window))
        ace-select-window)
      "select window")
     ("k" kill-buffer "kill buffer")
     ))

  (ivy-set-actions
   'counsel-projectile-find-file
   `(("s"
      ,(my/control-function-window-split
        counsel-projectile-find-file-action-other-window
        0 nil)
      "split horizontally")
     ("v"
      ,(my/control-function-window-split
        counsel-projectile-find-file-action-other-window
        nil 0)
      "split vertically")
     ("n"
      ,(my/execute-f-with-hook
        counsel-projectile-find-file-action
        ace-select-window)
      "select window")
     ))

  (ivy-set-actions
   'projectile-switch-project
   '(("d" dired "Open Dired in project's directory")
     ("v" projectile-vc "Open project root in vc-dir or magit")
     ("r" projectile-remove-known-project "Remove project(s)")))

  )

(defvar my/todo-search-string
  "TODO|NOTE|FIXME|XXX|DONE|HACK")

(defun my/counsel-projectile-ag-todos ()
  (interactive)
  (let ((counsel-projectile-ag-initial-input my/todo-search-string))
    (counsel-projectile-ag)))

(defun my/counsel-ag-todos ()
  (interactive)
  (counsel-ag my/todo-search-string))

(defun my/counsel-ag-todos-global ()
  (interactive)
  (my/try-exec-in-project 'my/counsel-projectile-ag-todos 'my/counsel-ag-todos))
#+END_SRC

* Yasnippet
  
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :init
  (use-package yasnippet-snippets :ensure t)
  :config
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
  (yas-reload-all))

;; (yas-global-mode 1)
(my/add-hooks '(markdown-mode-hook gfm-mode-hook) (yas-minor-mode))
#+END_SRC

* Other window management
** Dired

#+BEGIN_SRC emacs-lisp
(defun my/dired-find-file-ace ()
  (interactive)
  (let ((find-file-run-dired t)
        (fname (dired-get-file-for-visit)))
    (if (ace-select-window)
        (find-file fname))))

(defun my/dired-persistent-buffer ()
  (interactive)
  (call-interactively 'dired)
  (use-local-map (copy-keymap dired-mode-map))
  (local-set-key (kbd "RET") #'my/dired-find-file-ace))

(with-eval-after-load 'dired
  (define-key dired-mode-map
    (kbd "C-c v")
    (my/control-function-window-split
     dired-find-file-other-window
     nil 0))
  (define-key dired-mode-map
    (kbd "C-c s")
    (my/control-function-window-split
     dired-find-file-other-window
     0 nil))
  (define-key dired-mode-map
    (kbd "C-c n")
    'my/dired-find-file-ace))

(require 'dired-x)
(if is-mac (setq dired-use-ls-dired nil))
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :config
  (setq avy-background t)
  (global-set-key
   (kbd "M-i")
   (my/defun-with-alt avy-goto-line
                      (lambda () (interactive) (call-interactively 'avy-goto-char-2)))))
#+END_SRC
    
** Ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-dispatch-always t)
  (global-set-key (kbd "C-c o") 'ace-window))
#+END_SRC

** Treemacs
   
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :if (>= emacs-major-version 25)
  :ensure t
  :config
  (use-package treemacs-projectile :ensure t)
  (setq treemacs-follow-mode t
        treemacs-filewatch-mode t)
  (treemacs-git-mode 'simple)
  (define-key treemacs-mode-map (kbd "C-p") 'treemacs-previous-line)
  (define-key treemacs-mode-map (kbd "C-n") 'treemacs-next-line)
  (define-key global-map (kbd "M-0") 'treemacs))
#+END_SRC

** Helm
    
#+BEGIN_SRC emacs-lisp
(use-package helm :ensure t)

(use-package helm-xref
  :ensure t
  :config
  (setq xref-show-xrefs-function 'helm-xref-show-xrefs))
#+END_SRC

** Popwin

#+BEGIN_SRC emacs-lisp
;; popwin, mainly to always open helm buffers at bottom
(use-package popwin
  :ensure t
  :config
  (push '("^\*helm.+\*$" :regexp t) popwin:special-display-config)
  (add-hook 'helm-after-initialize-hook (lambda ()
                                            (popwin:display-buffer helm-buffer t)
                                            (popwin-mode -1)))
  ;;  Restore popwin-mode after a Helm session finishes.
  (add-hook 'helm-cleanup-hook (lambda () (popwin-mode 1))))
#+END_SRC

* Other major modes
** PDF tools

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install)
    :config
    ;; temporary - will investigate breaking changes
    (define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
    (define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)
    (define-key pdf-view-mode-map (kbd "h") 'image-backward-hscroll)
    (define-key pdf-view-mode-map (kbd "l") 'image-forward-hscroll)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)  ;; don't use swiper
    (with-eval-after-load 'pdf-outline
      (define-key pdf-outline-buffer-mode-map (kbd "<backtab>") 'outline-hide-sublevels))
    (add-hook
     'pdf-tools-enabled-hook
     (lambda ()
       ;; (setq pdf-view-midnight-colors '("#dcdccc" . "#494949"))
       (setq pdf-view-midnight-colors '("#99d1ce" . "#0a3749")))))
#+END_SRC

** elfeed
   
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t
  :config
  (use-package elfeed-goodies :ensure t)
  (use-package elfeed-web :ensure t)
  (setq elfeed-search-filter "@10-days-ago +unread")
  (define-key elfeed-search-mode-map (kbd "U") #'elfeed-update)
  (setq
   elfeed-feeds
   '(
     "http://xkcd.com/rss.xml"
     "https://idontgetoutmuch.wordpress.com/feed"
     "http://jr0cket.co.uk/atom.xml"
     "http://www.howardism.org/index.xml"
     "https://harryrschwartz.com/atom.xml"
     "http://lucumr.pocoo.org/feed.atom"
     "https://www.joelonsoftware.com/feed/"
     "http://lambdafoo.com/atom.xml"
     "http://www.rntz.net/blog/atom.xml"
     "https://jacobian.org/feed.xml"
     "https://accidentallyquadratic.tumblr.com/rss"
     "http://blog.acolyer.org/feed/"
     "http://jakevdp.github.io/feeds/all.atom.xml"
     "http://www.usrsb.in/rss.xml"
     "https://dev.to/feed"
     "https://eli.thegreenplace.net/feeds/all.atom.xml"
     "https://www.peterbe.com/rss.xml"

     ;; Microservices, DDD etc
     "https://microservices.io/feed.xml"

     ;; Emacs
     "http://nullprogram.com/feed/"
     "http://endlessparentheses.com/atom.xml"
     "http://irreal.org/blog/?feed=rss2"
     "https://ekaschalk.github.io/index.xml"
     "http://oremacs.com/atom.xml"
     "https://emacs.cafe/feed.xml"

     ;; FP
     "http://www.haskellforall.com/feeds/posts/default"
     "http://jaspervdj.be/rss.xml"
     "http://neilmitchell.blogspot.com/feeds/posts/default"
     "https://blog.qfpl.io/rss.xml"
     "http://bitemyapp.com/rss.xml"
     "http://feeds.feedburner.com/incodeblog"
     "http://www.tomharding.me/atom.xml"
     "http://www.serpentine.com/blog/feed/"
     "http://reasonablypolymorphic.com/atom.xml"
     "https://chrispenner.ca/atom.xml"
     "https://bartoszmilewski.com/feed/"
     "https://doisinkidney.com/rss.xml"
     "http://planet.haskell.org/rss20.xml"
     "http://fpcomplete.com/feed/"
     "http://taylor.fausak.me/sitemap.atom"
     "http://argumatronic.com/rss.xml"
     "https://teh.id.au/posts/atom.xml"

     ;; Podcasts
     "http://www.magicreadalong.com/episode?format=rss"

     ;; News

     ;; Comics
     "https://www.monkeyuser.com/feed.xml"

     ;; Infosec
     "https://blog.g0tmi1k.com/atom.xml"
     )))
#+END_SRC

** restclient

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
  (add-hook 'restclient-mode-hook 'evil-local-mode))
#+END_SRC

** Ledger

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure t
  :init
  (setq ledger-mode-should-check-version nil
        ledger-report-links-in-register nil
        ledger-binary-path "hledger")
  :config
  (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
  :mode "\\.hledger\\..*\\'")
#+END_SRC

** mu4e
   
#+BEGIN_SRC emacs-lisp
(if is-mac
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (progn
    (defvar mu-prefix (expand-file-name "~/opt/mu"))
    (add-to-list 'load-path (concat mu-prefix "/share/emacs/site-lisp/mu4e"))
    (setq mu4e-mu-binary (concat mu-prefix "/bin/mu"))))

(defvar mu-prefix (expand-file-name "~/opt/mu"))
(add-to-list 'load-path (concat mu-prefix "/share/emacs/site-lisp/mu4e"))
(setq mu4e-mu-binary (concat mu-prefix "/bin/mu"))
(setq mu4e-get-mail-command "offlineimap -o")
(require 'mu4e)
(setq mu4e-contexts
      `( ,(make-mu4e-context
           :name "Gmail"
           :match-func (lambda (msg) (when msg
                                       (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
           :vars '(
                   (mu4e-trash-folder . "/Gmail/[Gmail].Trash")
                   (mu4e-refile-folder . "/Gmail/[Gmail].Archive")
                   (mu4e-drafts-folder . "/Gmail/[Gmail].Drafts")
                   (mu4e-sent-folder . "/Gmail/[Gmail].Sent Mail")
                   ))))
;; smtpmail
(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-stream-type 'starttls
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-user "alexpeitsinis@gmail.com"
      smtpmail-smtp-service 587)
#+END_SRC

** erc

#+BEGIN_SRC emacs-lisp
(use-package erc
  :config
  (setq erc-rename-buffers t
        erc-interpret-mirc-color t
        erc-lurker-hide-list '("JOIN" "PART" "QUIT")
        erc-autojoin-channels-alist '(("freenode.net" "#haskell")))

  (defun my/erc-freenode ()
    (interactive)
    (erc :server "irc.freenode.net" :port 6667 :nick "runforestrun"))

  (defun my/erc-switch-to-buffer ()
    (interactive)
    (let ((read-buffer-function nil))
      (call-interactively 'erc-switch-to-buffer)))
  (define-key erc-mode-map (kbd "C-c C-b") 'my/erc-switch-to-buffer))
#+END_SRC

* Modeline
** Regular modeline
  
# Copied from spacemacs

#+BEGIN_SRC emacs-lisp
(defface modeline-flycheck-error
  '((t (:foreground "#e05e5e" :distant-foreground "#e05e5e")))
  "Face for flycheck error feedback in the modeline."
  :group 'modeline-flycheck)
(defface modeline-flycheck-warning
  '((t (:foreground "#bfb03d" :distant-foreground "#bfb03d")))
  "Face for flycheck warning feedback in the modeline."
  :group 'modeline-flycheck)
(defface modeline-flycheck-info
  '((t (:foreground "#65a0ed" :distant-foreground "#65a0ed")))
  "Face for flycheck info feedback in the modeline."
  :group 'modeline-flycheck)

(defvar modeline-flycheck-bullet "•%s"
  "The bullet used for the flycheck segment.
This should be a format string with a single `%s'-expression corresponding to
the number of errors.")

(defun my/mode-line-flycheck-state (state)
  (let* ((counts (flycheck-count-errors flycheck-current-errors))
         (errorp (flycheck-has-current-errors-p state))
         (err (or (cdr (assq state counts)) "?"))
         (running (eq 'running flycheck-last-status-change))
         (face (intern (format "modeline-flycheck-%S" state))))
    (if (or errorp running)
        (propertize (format modeline-flycheck-bullet err) 'face face))))

(defun my/mode-line-flycheck ()
  (let* ((ml-error (my/mode-line-flycheck-state 'error))
         (ml-warning (my/mode-line-flycheck-state 'warning))
         (ml-info (my/mode-line-flycheck-state 'info))
         (ml-status (concat ml-error ml-warning ml-info)))
    (if (null ml-status) "" (concat " " ml-status " "))))
#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC
  
#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                ;; evil-mode-line-tag
                mode-line-mule-info
                mode-line-client mode-line-modified mode-line-remote
                mode-line-frame-identification mode-line-buffer-identification " "
                mode-line-position
                (vc-mode vc-mode)
                (:eval (my/mode-line-flycheck))
                (:eval (my/mode-line-venv))
                mode-line-modes mode-line-misc-info mode-line-end-spaces))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp :tangle no
(use-package powerline
  :ensure t
  :config
  (powerline-default-theme)
  (add-hook 'my/theme-change-hook #'powerline-reset)
  (setq flycheck-mode-line '(:eval (my/mode-line-flycheck)))
  (setq global-mode-string
        (append global-mode-string '((:eval (my/mode-line-venv))))))
#+END_SRC

** Spaceline

#+BEGIN_SRC emacs-lisp :tangle no
(use-package spaceline
  :ensure t
  :init
  (require 'spaceline-config)
  (setq powerline-default-separator 'arrow
        powerline-height nil
        spaceline-highlight-face-func 'spaceline-highlight-face-modified)
  ;; (spaceline-toggle-buffer-encoding-abbrev-off)
  (spaceline-toggle-buffer-size-off)
  (spaceline-emacs-theme)
  ;; (custom-set-faces
  ;;  '(spaceline-unmodified
  ;;    ((t (:inherit mode-line :background "DarkOrange" :foreground "#3e3d31")))))
  )
#+END_SRC

* Org-mode
   
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-log-done 'time
      org-confirm-babel-evaluate nil
      org-clock-into-drawer nil
      org-src-fontify-natively t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t
      org-src-window-setup 'other-window
      org-hide-leading-stars t
      org-directory (expand-file-name "~/org/")
      org-default-notes-file (concat org-directory "notes.org")
      org-ellipsis "…"
      org-todo-keywords '((sequence "TODO" "IN PROGRESS" "|" "DONE"))
      org-todo-keyword-faces '(("IN PROGRESS" . (:foreground "DarkOrange3" :weight bold)))
      )

;; org-capture
(setq org-capture-templates
      '(("c"
         "Code comment"
         entry
         (file+headline org-default-notes-file "Code comments")
         "\n\n* %?\n\n#+BEGIN_SRC %^{Language}\n%i\n#+END_SRC\n\n%a\n")))

;; format string used when creating CLOCKSUM lines and when generating a
;; time duration (avoid showing days)
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

(defun my/org-insert-template ()
  (interactive)
  (let* ((templ-dir (expand-file-name "~/.emacs.d/org-templates/"))
         (ls (directory-files templ-dir nil "^[^.]"))
         (file (completing-read "Template: " ls))
         (path (concat templ-dir file)))
    (insert-file-contents path)))

(defun my/org-set-src-faces ()
  (let* ((func (if (eq my/theme-type 'dark) 'color-lighten-name 'color-darken-name))
         (bg (face-attribute 'default :background))
         (bg+ (funcall func bg 2))
         (bg++ (funcall func bg 7))
         (fg (face-attribute 'default :foreground)))
    (custom-theme-set-faces
     my/theme
     `(org-block ((t (:background ,bg+))))
     `(org-block-begin-line ((t (:background ,bg++))))
     `(org-block-end-line ((t (:background ,bg++)))))))

(add-hook 'my/theme-change-hook 'my/org-set-src-faces)

(use-package graphviz-dot-mode :ensure t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   ;; (ipython . t)
   (haskell . t)
   (dot . t)
   ;; (restclient . t)
   ))

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
(add-hook
 'org-mode-hook
 (lambda ()
   (use-package ox-twbs :ensure t)
   (use-package ox-reveal :ensure t)
   ;; (use-package org-bullets :ensure t :config (org-bullets-mode))

   (define-key org-mode-map (kbd "TAB") 'org-cycle)
   (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)

   (my/set-mode-fill-width 'org-mode-hook 100)

   (add-to-list
    'org-structure-template-alist
    '("pf" "#+BEGIN_SRC ipython :session :file %file :exports both\n?\n#+END_SRC"))
   (add-to-list
    'org-structure-template-alist
    '("po" "#+BEGIN_SRC ipython :session :exports both\n?\n#+END_SRC"))
   (add-to-list
    'org-structure-template-alist
    '("pr" "#+BEGIN_PREVIEW\n?\n#+END_PREVIEW"))))
#+END_SRC
   
* Reading papers

#+BEGIN_SRC emacs-lisp
(defvar my/papers-dir (expand-file-name "~/papers/"))

(use-package helm-bibtex
  :ensure t
  :config
  (setq
   helm-bibtex-bibliography (concat my/papers-dir "index.bib")
   helm-bibtex-library-path (concat my/papers-dir "lib/")
   helm-bibtex-notes-path (concat my/papers-dir "papers.org")
   bibtex-completion-pdf-field "File"  ;; try `file' field
   bibtex-completion-bibliography `(,(concat my/papers-dir "index.bib"))
   bibtex-completion-notes-path (concat my/papers-dir "papers.org")))

(use-package org-ref
  :ensure t
  :config
  (setq org-ref-notes-directory my/papers-dir
        org-ref-bibliography-notes (concat my/papers-dir "papers.org")
        org-ref-default-bibliography `(,(concat my/papers-dir "index.bib"))
        org-ref-pdf-directory (concat my/papers-dir "lib/")))

(use-package interleave :ensure t)
#+END_SRC

* Setup
** Per-workstation setup
   
# thanks Nicolas Petton

#+BEGIN_SRC emacs-lisp
(defvar my/hosts-dir (expand-file-name "~/.emacs.d/hosts/"))
(defvar my/hostname (substring (shell-command-to-string "hostname") 0 -1))
(let* ((host-file (concat my/hosts-dir "init-" my/hostname ".el")))
  (load-file host-file))
#+END_SRC
   
** Global setup

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

(setq x-underline-at-descent-line t)

(my/set-theme)
(my/set-font)

(unless (display-graphic-p)
  (set-face-attribute 'default nil :background "#222222")
  (run-hooks 'my/theme-change-hook))

(setq linum-format 'dynamic)
(custom-set-faces
 '(whitespace-trailing ((t (:background "#602020"))))
 '(anzu-mode-line ((t (:foreground "magenta" :weight bold))))
 '(fixed-pitch ((t nil)))
 )
(set-face-attribute 'show-paren-match nil :weight 'normal)
;; (set-face-attribute 'font-lock-comment-face nil :slant 'italic)

(hybrid-mode)

(diminish 'whitespace-mode "")

(when (fboundp 'treemacs--setup-icon-background-colors)
  (treemacs--setup-icon-background-colors))
#+END_SRC

** recentf
   
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(recentf-open-files nil "*Recent Files*")
(setq recentf-max-saved-items 100000)
(global-set-key (kbd "C-x C-a") 'counsel-recentf)
#+END_SRC

